/* Autogenerated file. Do not edit manually. */

package com.diegotobalina.framework.core.crud;

import com.diegotobalina.framework.core.exception.exception.EntityNotValidException;
import com.diegotobalina.framework.core.exception.exception.ForbiddenTenantException;
import com.diegotobalina.framework.core.multitenant.TenantContext;
import org.springframework.stereotype.Component;

import javax.persistence.*;

@Component
public class BaseEntityListener {

  @PrePersist
  public void prePersist(BaseEntity baseEntity) throws EntityNotValidException {
    baseEntity.checkIfCanBeInserted();
    baseEntity.updateTenantId(TenantContext.getCurrentTenant());
  }

  @PreUpdate
  public void preUpdate(BaseEntity baseEntity) throws EntityNotValidException {
    baseEntity.checkIfCanBeInserted();
  }

  @PreRemove
  public void preRemove(BaseEntity baseEntity) throws ForbiddenTenantException {
    validateTenant(baseEntity);
  }

  @PostLoad
  public void postLoad(BaseEntity baseEntity) throws ForbiddenTenantException {
    validateTenant(baseEntity);
  }

  @PostPersist
  public void postPersist(BaseEntity baseEntity) throws ForbiddenTenantException {
    validateTenant(baseEntity);
  }

  @PostUpdate
  public void postUpdate(BaseEntity baseEntity) throws ForbiddenTenantException {
    validateTenant(baseEntity);
  }

  @PostRemove
  public void postRemove(BaseEntity baseEntity) throws ForbiddenTenantException {
    validateTenant(baseEntity);
  }

  private void validateTenant(BaseEntity baseEntity) throws ForbiddenTenantException {
    boolean isSameTenant = baseEntity.isSameTenant(TenantContext.getCurrentTenant());
    if (!isSameTenant) throw new ForbiddenTenantException("Tenant mismatch");
  }
}
