/* Autogenerated file. Do not edit manually. */

package com.diegotobalina.framework.core.crud;

import com.diegotobalina.framework.core.api.response.StyleEnum;
import com.diegotobalina.framework.core.util.ObjectUtils;
import lombok.SneakyThrows;
import org.apache.commons.lang3.NotImplementedException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.List;

public interface IBaseMapper<
    E extends BaseEntity, I extends BaseInputDTO, B extends BaseOutputDTO, O extends B> {

  default E getEntityInstance() {
    throw new NotImplementedException("Missing @Override getInstance() method in Mapper");
  }

  default B getBaseOutputDTOInstance() {
    throw new NotImplementedException("Missing @Override getInstance() method in Mapper");
  }

  default O getOutputDTOInstance() {
    throw new NotImplementedException("Missing @Override getInstance() method in Mapper");
  }

  @SneakyThrows
  default E toEntity(I inputDTO) {
    E newInstance = getEntityInstance();
    ObjectUtils.copy(inputDTO, newInstance, new String[0]);
    return newInstance;
  }

  @SneakyThrows
  default B toBaseOutputDTO(E entity) {
    B newInstance = getBaseOutputDTOInstance();
    ObjectUtils.copy(entity, newInstance, new String[0]);
    return newInstance;
  }

  @SneakyThrows
  default O toOutputDTO(E entity) {
    O newInstance = getOutputDTOInstance();
    ObjectUtils.copy(entity, newInstance, new String[0]);
    return newInstance;
  }

  default PageImpl<B> toBaseOutputDTOs(StyleEnum style, Pageable pageable, Page<E> entities) {
    List<B> exampleOS = toBaseOutputDTOs(style, entities);
    return new PageImpl<>(exampleOS, pageable, entities.getTotalElements());
  }

  default List<B> toBaseOutputDTOs(StyleEnum style, Page<E> entities) {
    return entities.getContent().stream().map(entity -> toBaseOutputDTO(style, entity)).toList();
  }

  default B toBaseOutputDTO(StyleEnum style, E entity) {
    return style.equals(StyleEnum.BASE) ? toBaseOutputDTO(entity) : toOutputDTO(entity);
  }
}
