/* Autogenerated file. Do not edit manually. */

package com.diegotobalina.framework.core.crud;

import com.diegotobalina.framework.core.api.response.StyleEnum;
import com.diegotobalina.framework.core.crud.services.ICrudService;
import com.diegotobalina.framework.core.crud.usecases.ICreateUseCase;
import com.diegotobalina.framework.core.crud.usecases.IDeleteUseCase;
import com.diegotobalina.framework.core.crud.usecases.IFindUseCase;
import com.diegotobalina.framework.core.crud.usecases.IUpdateUseCase;
import com.diegotobalina.framework.core.search.SpecificationsBuilder;
import com.diegotobalina.framework.core.swagger.ApiPageable;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.lang.reflect.InvocationTargetException;

@Validated
@AllArgsConstructor
public abstract class StaffitController<E extends StaffitEntity, I extends StaffitInputDTO, B extends StaffitBaseOutputDTO, O extends B> {


    protected abstract StaffitMapper getMapper();

    protected abstract IFindUseCase getFindUseCase();

    protected abstract ICreateUseCase getCreateUseCase();

    protected abstract IUpdateUseCase getUpdateUseCase();

    protected abstract IDeleteUseCase getDeleteUseCase();

    protected abstract ICrudService getService();

    protected abstract StaffitRepository getRepository();

    protected abstract Class<?> getSpecificationClass();


    @GetMapping("{id}")
    @Transactional(rollbackFor = Exception.class, readOnly = true)
    public StaffitBaseOutputDTO findById(
            @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
            @PathVariable("id") long id) {
        StaffitEntity foundStaffitEntity = getFindUseCase().findById(id, getService(), getRepository());
        return getMapper().toBaseOutputDTO(style, foundStaffitEntity);
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @Transactional(rollbackFor = Exception.class)
    public StaffitBaseOutputDTO create(
            @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
            @RequestBody @Valid I exampleInputDTO) {
        StaffitEntity example = getMapper().toEntity(exampleInputDTO);
        StaffitEntity createdStaffitEntity = getCreateUseCase().create(example, getService(), getRepository());
        return getMapper().toBaseOutputDTO(style, createdStaffitEntity);
    }

    @PutMapping("{id}")
    @Transactional(rollbackFor = Exception.class)
    public StaffitBaseOutputDTO update(
            @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
            @PathVariable("id") long id,
            @RequestBody @Valid I exampleInputDTO) {
        StaffitEntity updatedStaffitEntity = getUpdateUseCase().update(id, exampleInputDTO, getService(), getRepository());
        return getMapper().toBaseOutputDTO(style, updatedStaffitEntity);
    }

    @DeleteMapping("{id}")
    @Transactional(rollbackFor = Exception.class)
    public StaffitBaseOutputDTO delete(@RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style, @PathVariable("id") long id) {
        StaffitEntity deletedStaffitEntity = getDeleteUseCase().delete(id, getService(), getRepository());
        return getMapper().toBaseOutputDTO(style, deletedStaffitEntity);
    }

    @ApiPageable
    @GetMapping("search")
    @SuppressWarnings("unchecked")
    @Transactional(rollbackFor = Exception.class, readOnly = true)
    public PageImpl<B> search(
            @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
            @RequestParam(value = "search", required = false) String search,
            @PageableDefault(sort = "id") Pageable pageable) throws ClassNotFoundException,
            InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        Specification<E> spec = (Specification<E>) new SpecificationsBuilder().build(search, getSpecificationClass());
        Page<?> entities = getRepository().findAll(spec, pageable);
        return getMapper().toBaseOutputDTOs(style, pageable, entities);
    }


}
