/* Autogenerated file. Do not edit manually. */

package com.diegotobalina.framework.core.crud;

import com.diegotobalina.framework.core.api.response.StyleEnum;
import com.diegotobalina.framework.core.crud.services.IBaseService;
import com.diegotobalina.framework.core.crud.usecases.ICreateUseCase;
import com.diegotobalina.framework.core.crud.usecases.IDeleteUseCase;
import com.diegotobalina.framework.core.crud.usecases.IFindUseCase;
import com.diegotobalina.framework.core.crud.usecases.IUpdateUseCase;
import com.diegotobalina.framework.core.search.SpecificationsBuilder;
import com.diegotobalina.framework.core.swagger.ApiPageable;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.lang.reflect.InvocationTargetException;

@Validated
@AllArgsConstructor
public abstract class BaseController<
    E extends BaseEntity, I extends BaseInputDTO, B extends BaseOutputDTO, O extends B> {

  protected abstract IBaseMapper getMapper();

  protected abstract IFindUseCase getFindUseCase();

  protected abstract ICreateUseCase getCreateUseCase();

  protected abstract IUpdateUseCase getUpdateUseCase();

  protected abstract IDeleteUseCase getDeleteUseCase();

  protected abstract IBaseService getService();

  protected abstract IBaseRepository getRepository();

  protected abstract Class<?> getSpecificationClass();

  @GetMapping("{id}")
  @Transactional(rollbackFor = Exception.class, readOnly = true)
  public BaseOutputDTO findById(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @PathVariable("id") long id) {
    BaseEntity foundBaseEntity = getFindUseCase().findById(id, getService(), getRepository());
    return getMapper().toBaseOutputDTO(style, foundBaseEntity);
  }

  @PostMapping
  @ResponseStatus(HttpStatus.CREATED)
  @Transactional(rollbackFor = Exception.class)
  public BaseOutputDTO create(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @RequestBody @Valid I exampleInputDTO) {
    BaseEntity example = getMapper().toEntity(exampleInputDTO);
    BaseEntity createdBaseEntity =
        getCreateUseCase().create(example, getService(), getRepository());
    return getMapper().toBaseOutputDTO(style, createdBaseEntity);
  }

  @PutMapping("{id}")
  @Transactional(rollbackFor = Exception.class)
  public BaseOutputDTO update(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @PathVariable("id") long id,
      @RequestBody @Valid I exampleInputDTO) {
    BaseEntity updatedBaseEntity =
        getUpdateUseCase().update(id, exampleInputDTO, getService(), getRepository());
    return getMapper().toBaseOutputDTO(style, updatedBaseEntity);
  }

  @DeleteMapping("{id}")
  @Transactional(rollbackFor = Exception.class)
  public BaseOutputDTO delete(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @PathVariable("id") long id) {
    BaseEntity deletedBaseEntity = getDeleteUseCase().delete(id, getService(), getRepository());
    return getMapper().toBaseOutputDTO(style, deletedBaseEntity);
  }

  @ApiPageable
  @GetMapping("search")
  @SuppressWarnings("unchecked")
  @Transactional(rollbackFor = Exception.class, readOnly = true)
  public PageImpl<B> search(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @RequestParam(value = "search", required = false) String search,
      @PageableDefault(sort = "id") Pageable pageable)
      throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,
          InstantiationException, IllegalAccessException {
    Specification<E> spec =
        (Specification<E>) new SpecificationsBuilder().build(search, getSpecificationClass());
    Page<?> entities = getRepository().findAll(spec, pageable);
    return getMapper().toBaseOutputDTOs(style, pageable, entities);
  }
}
