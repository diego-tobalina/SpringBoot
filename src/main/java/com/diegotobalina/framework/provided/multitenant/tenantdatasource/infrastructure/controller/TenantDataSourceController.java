/* Autogenerated file. Do not edit manually. */

package com.diegotobalina.framework.provided.multitenant.tenantdatasource.infrastructure.controller;

import com.diegotobalina.framework.provided.multitenant.tenantdatasource.application.TenantDataSourceService;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.application.usecase.CreateTenantDataSourceUseCase;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.application.usecase.DeleteTenantDataSourceUseCase;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.application.usecase.FindTenantDataSourceUseCase;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.application.usecase.UpdateTenantDataSourceUseCase;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.domain.TenantDataSource;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.domain.TenantDataSourceMapper;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.domain.TenantDataSourceSpecification;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.infrastructure.controller.dto.input.TenantDataSourceInputDTO;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.infrastructure.controller.dto.output.BaseTenantDataSourceOutputDTO;
import com.diegotobalina.framework.provided.multitenant.tenantdatasource.infrastructure.repository.TenantDataSourceRepository;
import com.diegotobalina.framework.provided.advancedsearch.SpecificationsBuilder;
import com.diegotobalina.framework.provided.responses.StyleEnum;
import com.diegotobalina.framework.provided.swagger.ApiPageable;
import io.swagger.annotations.Api;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.lang.reflect.InvocationTargetException;

@Validated
@RestController
@AllArgsConstructor
@Api(tags = "TenantDataSource")
@RequestMapping("/api/v0/tenantdatasources")
public class TenantDataSourceController {

  private final FindTenantDataSourceUseCase findTenantDataSourceUseCase;
  private final CreateTenantDataSourceUseCase createUseCase;
  private final UpdateTenantDataSourceUseCase updateUseCase;
  private final DeleteTenantDataSourceUseCase deleteUseCase;
  private final TenantDataSourceRepository tenantdatasourceRepository;
  private final TenantDataSourceService tenantdatasourceService;

  @GetMapping("{id}")
  @Transactional(rollbackFor = Exception.class, readOnly = true)
  public BaseTenantDataSourceOutputDTO findById(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @PathVariable("id") long id) {
    TenantDataSource foundTenantDataSource = findTenantDataSourceUseCase.findById(id, tenantdatasourceService, tenantdatasourceRepository);
    return TenantDataSourceMapper.INSTANCE.toTenantDataSourceOutputDTO(style, foundTenantDataSource);
  }

  @PostMapping
  @ResponseStatus(HttpStatus.CREATED)
  @Transactional(rollbackFor = Exception.class)
  public BaseTenantDataSourceOutputDTO create(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @RequestBody @Valid TenantDataSourceInputDTO tenantdatasourceInputDTO) {
    TenantDataSource tenantdatasource = TenantDataSourceMapper.INSTANCE.toTenantDataSource(tenantdatasourceInputDTO);
    TenantDataSource createdTenantDataSource = createUseCase.create(tenantdatasource, tenantdatasourceService, tenantdatasourceRepository);
    return TenantDataSourceMapper.INSTANCE.toTenantDataSourceOutputDTO(style, createdTenantDataSource);
  }

  @PutMapping("{id}")
  @Transactional(rollbackFor = Exception.class)
  public BaseTenantDataSourceOutputDTO update(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @PathVariable("id") long id,
      @RequestBody @Valid TenantDataSourceInputDTO tenantdatasourceInputDTO) {
    TenantDataSource updatedTenantDataSource =
        updateUseCase.update(id, tenantdatasourceInputDTO, tenantdatasourceService, tenantdatasourceRepository);
    return TenantDataSourceMapper.INSTANCE.toTenantDataSourceOutputDTO(style, updatedTenantDataSource);
  }

  @DeleteMapping("{id}")
  @Transactional(rollbackFor = Exception.class)
  public BaseTenantDataSourceOutputDTO delete(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @PathVariable("id") long id) {
    TenantDataSource deletedTenantDataSource = deleteUseCase.delete(id, tenantdatasourceService, tenantdatasourceRepository);
    return TenantDataSourceMapper.INSTANCE.toTenantDataSourceOutputDTO(style, deletedTenantDataSource);
  }

  @ApiPageable
  @GetMapping("search")
  @SuppressWarnings("unchecked")
  @Transactional(rollbackFor = Exception.class, readOnly = true)
  public Page<BaseTenantDataSourceOutputDTO> search(
      @RequestParam(name = "style", required = false, defaultValue = "BASE") StyleEnum style,
      @RequestParam(value = "search", required = false) String search,
      @PageableDefault(sort = "id") Pageable pageable)
      throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,
          InstantiationException, IllegalAccessException {
    Specification<TenantDataSource> spec =
        (Specification<TenantDataSource>)
            new SpecificationsBuilder().build(search, TenantDataSourceSpecification.class);
    Page<TenantDataSource> tenantdatasources = tenantdatasourceRepository.findAll(spec, pageable);
    return TenantDataSourceMapper.INSTANCE.toTenantDataSourceOutputDTOS(style, pageable, tenantdatasources);
  }
}
