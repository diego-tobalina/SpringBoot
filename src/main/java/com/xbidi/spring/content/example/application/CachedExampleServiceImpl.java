/* Autogenerated file. Do not edit manually. */

package com.xbidi.spring.content.example.application;

import com.xbidi.spring.content.example.domain.Example;
import lombok.Getter;
import lombok.Setter;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CachedExampleServiceImpl implements CachedExampleService, InitializingBean {

  // ----------- Repository -----------

  @Getter @Setter private static CachedExampleService instance;
  private final ExampleService exampleService;

  // ----------- Instance -----------

  public CachedExampleServiceImpl(ExampleService exampleService) {
    this.exampleService = exampleService;
  }

  @Override
  public void afterPropertiesSet() {
    setInstance(this);
  }

  // ----------- Public methods -----------

  @Override
  @Cacheable(value = "cachedExampleService.findById", key = "{#id}")
  public Example findById(long id) {
    return exampleService.findById(id);
  }

  @Override
  @Cacheable(value = "cachedExampleService.findByIdOrNull", key = "{#id}")
  public Example findByIdOrNull(long id) {
    return exampleService.findByIdOrNull(id);
  }

  @Override
  @Cacheable(cacheNames = "cachedExampleService.findAllByIds")
  public List<Example> findAllByIds(List<Long> ids) {
    return exampleService.findAllByIds(ids);
  }

  @Override
  @Caching(
      put = {
        @CachePut(value = "cachedExampleService.findById", key = "{#result.id}"),
        @CachePut(value = "cachedExampleService.findByIdOrNull", key = "{#result.id}")
      },
      evict = @CacheEvict(value = "cachedExampleService.findAllByIds", allEntries = true))
  public Example save(Example example) {
    return exampleService.save(example);
  }

  @Override
  @Caching(
      evict = {
        @CacheEvict(value = "cachedExampleService.findById", allEntries = true),
        @CacheEvict(value = "cachedExampleService.findByIdOrNull", allEntries = true),
        @CacheEvict(value = "cachedExampleService.findAllByIds", allEntries = true)
      })
  public List<Example> saveAll(List<Example> examples) {
    return exampleService.saveAll(examples);
  }

  @Override
  @Caching(
      evict = {
        @CacheEvict(value = "cachedExampleService.findById", key = "{#id}"),
        @CacheEvict(value = "cachedExampleService.findByIdOrNull", key = "{#id}"),
        @CacheEvict(value = "cachedExampleService.findAllByIds", allEntries = true)
      })
  public void deleteById(long id) {
    exampleService.deleteById(id);
  }

  @Caching(
      evict = {
        @CacheEvict(value = "cachedExampleService.findById", allEntries = true),
        @CacheEvict(value = "cachedExampleService.findByIdOrNull", allEntries = true),
        @CacheEvict(value = "cachedExampleService.findAllByIds", allEntries = true)
      })
  @Override
  public void deleteAllById(List<Long> ids) {
    exampleService.deleteAllById(ids);
  }

  // ----------- Cache cleaningByTime -----------

  /** Limpia la cache del método findById cada minuto */
  @Scheduled(fixedDelay = 60000)
  @CacheEvict(value = "cachedExampleService.findById", allEntries = true)
  public void cacheEvictUserServiceFindById() {
    // empty
  }

  /** Limpia la cache del método findByIdOrNull cada minuto */
  @Scheduled(fixedDelay = 60000)
  @CacheEvict(value = "cachedExampleService.findByIdOrNull", allEntries = true)
  public void cacheEvictUserServiceFindByIdOrNull() {
    // empty
  }

  /** Limpia la cache del método findAllByIds cada minuto */
  @Scheduled(fixedDelay = 60000)
  @CacheEvict(value = "cachedExampleService.findAllByIds", allEntries = true)
  public void cacheEvictUserServiceFindAllByIds() {
    // empty
  }

  // ----------- Private methods -----------

}
